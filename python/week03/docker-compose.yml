version: '3.9'

services:
  product_service:
    build: ./backend/product_service
    container_name: product_service_container
    ports:
      - "8000:8000"
    env_file:
      - ./backend/product_service/app/.env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: products
      POSTGRES_HOST: host.docker.internal
      POSTGRES_PORT: 5432
    # extra_hosts is recommended for host.docker.internal reliability
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - ecom_network # Assign to our custom network
    restart: on-failure # Automatically restart if the service fails

  order_service:
    build: ./backend/order_service
    container_name: order_service_container
    ports:
      - "8001:8001"
    env_file:
      - ./backend/order_service/app/.env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
      POSTGRES_HOST: host.docker.internal
      POSTGRES_PORT: 5432
      PRODUCT_SERVICE_URL: http://product_service:8000
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - product_service # Ensure product service starts before order service
    networks:
      - ecom_network # Assign to our custom network
    restart: on-failure # Automatically restart if the service fails

  react_app:
    build:
      context: ./frontend/react-app
      dockerfile: Dockerfile
    container_name: react_app_container
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/react-app/.env
    environment:
      # Pass backend API URLs to the React app.
      # These use 'localhost' because the frontend in the browser accesses them via the host's exposed ports.
      REACT_APP_PRODUCT_SERVICE_URL: http://localhost:8000
      REACT_APP_ORDER_SERVICE_URL: http://localhost:8001
    depends_on:
      - product_service
      - order_service
    stdin_open: true # Keep stdin open for interactive processes (like dev server)
    tty: true # Allocate a pseudo-TTY
    networks:
      - ecom_network # Assign to our custom network
    restart: on-failure # Automatically restart if the service fails

# Define a custom bridge network for better isolation and communication
networks:
  ecom_network:
    driver: bridge
